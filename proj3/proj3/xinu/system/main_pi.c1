/*  main.c  - main */

#include <xinu.h>
void sync_printf(char *fmt, ...)
{
        intmask mask = disable();
        void *arg = __builtin_apply_args();
        __builtin_apply((void*)kprintf, arg, 100);
        restore(mask);
}
process increment1(uint32 *x, uint32 n1, pi_lock_t *mutex1){
	uint32 i, j,k,l;	
	for (i=0; i<n1; i++){
		//sync_printf("thread %d with prio %d mutex1\n",currpid,proctab[currpid].prprio); 
		pi_lock(mutex1);
		(*x)+=1;
		sleepms(170);

	for (j=0; j<10000; j++);
		//sleep(QUANTUM);
		yield();
		pi_unlock(mutex1);
	}
	
	return OK;
}

process increment2(uint32 *x, uint32 n1, pi_lock_t *mutex1){
	uint32 i, j,k,l;	
	for (i=0; i<n1; i++){
		//sync_printf("thread %d with prio %d mutex1\n",currpid,proctab[currpid].prprio); 
		pi_lock(mutex1);
		(*x)+=1;
		sleepms(70);

	for (j=0; j<10000; j++);
		//sleep(QUANTUM);
		yield();
		pi_unlock(mutex1);
	}
	
	return OK;
}

process increment(uint32 *x,uint32 *y, uint32 n1,uint32 n2, pi_lock_t *mutex1,pi_lock_t *mutex2){
	uint32 i, j,k,l;	
	for (i=0; i<n1; i++){
		//sync_printf("thread %d with prio %d mutex1\n",currpid,proctab[currpid].prprio); 
		pi_lock(mutex1);
		(*x)+=1;
		sleepms(70);
		for (k=0; k<n2; k++){
			//sync_printf("thread %d with prio %d mutex2\n",currpid,proctab[currpid].prprio);
			pi_lock(mutex2);
			(*y)+=1;
			sleepms(100);
			//sync_printf("nested\n");
			for (l=0; l<10000; l++);
			//sleep(QUANTUM);
			yield();
			pi_unlock(mutex2);
		}
		for (j=0; j<10000; j++);
		//sleep(QUANTUM);
		yield();
		pi_unlock(mutex1);
	}
	
	return OK;
}

process nthreads(uint32 nt, uint32 *x,uint32 *y,uint32 n1,uint32 n2, pi_lock_t *mutex1,pi_lock_t *mutex2){
	pid32 pids[nt];
	int i;
	//for (i=0; i < nt; i++){
	//	pids[i] = create((void *)increment, INITSTK, i+1,"p", 6, x,y ,n1,n2, mutex1,mutex2);
	//	if (pids[i]==SYSERR){
	//		kprintf("nthreads():: ERROR - could not create process");
	//		return SYSERR;
	//	}
	//}
	//for (i=0; i < nt; i++){
	//	if (resume(pids[i]) == SYSERR){
	//		kprintf("nthreads():: ERROR - could not resume process");
	//		return SYSERR;
	//	}
	//	sleepms(10);
	//}
	//for (i=0; i < nt; i++) receive();
	pids[0]=create((void *)increment, INITSTK, 1,"p", 6, x,y ,n1,n2, mutex1,mutex2);
	pids[1]=create((void *)increment1, INITSTK, 2,"p", 4, y ,n2, mutex2);
	pids[2]=create((void *)increment2, INITSTK, 3,"p", 4, x ,n1, mutex1);
	resume(pids[0]);
	sleepms(170);
	resume(pids[1]);
	sleepms(10);
	resume(pids[2]);
	//sleepms(10);
	for (i=0; i < nt; i++) receive();
	return OK;
}

process	main(void)
{
	uint32 x,y;			// shared variable
	unsigned nt;			// number of threads cooperating
	unsigned value1 = 9;// target value of variable
	unsigned value2 = 9;
	pi_lock_t mutex1;  			// lock
	pi_lock_t mutex2;

	kprintf("\n\n=====       Testing the LOCK w/ sleep&guard         =====\n");

	// 10 threads
	kprintf("\n\n================= TEST 1 = 10 threads ===================\n");
	x = 0;y=0;	nt = 3;
 	pi_initlock(&mutex1); 
	pi_initlock(&mutex2); 
	resume(create((void *)nthreads, INITSTK, 1,"nthreads", 7, nt, &x,&y, value1/nt,value2/nt, &mutex1, &mutex2));
	receive(); 
	sync_printf("%d threads, n=%d, target value=%d\n", nt, value1, x);
	sync_printf("%d threads, n=%d, target value=%d\n", nt, value2, y);
	if (x==value1) kprintf("TEST1 PASSED.\n"); else kprintf("TEST1 FAILED.\n");
	if (y==value2) kprintf("TEST2 PASSED.\n"); else kprintf("TEST2 FAILED.\n");

	

	return OK;
}
